import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;

import java.util.UUID;
import java.io.IOException;
import java.io.OutputStream;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.Set;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;

class BluetoothManager implements Runnable{
  private BluetoothAdapter BTadapter;
  private BluetoothDevice BTdevice;
  //well-known SPP UUID from http://developer.android.com/reference/android/bluetooth/BluetoothDevice.html
  private static final UUID BTuuid = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");
  private BluetoothSocket BTsocket=null;
  private OutputStream BToutStream;
  private InputStream BTinStream;
  private String BTaddress=null;
  
  private static final int BUFFERSIZE = 4096; 
  private final ByteBuffer mInBuffer = ByteBuffer.allocate(BUFFERSIZE);
  private final ByteBuffer mOutBuffer = ByteBuffer.allocate(BUFFERSIZE);
  private final ByteBuffer tmpInBuffer = ByteBuffer.allocate(BUFFERSIZE);
  private boolean isreading = false;
  private boolean error_flag = false;
  private boolean DEBUG = true;

  public BluetoothManager(BluetoothAdapter BTadapter) {
    super();
    this.BTadapter = BTadapter;
  }

  // Get device names of the ones we are paired with already
  public void getPairedDevices() {
    int i = 0;
    Set<BluetoothDevice> pairedDevices = BTadapter.getBondedDevices();
    if (pairedDevices.size() > 0) {
      for (BluetoothDevice device : pairedDevices) {
        passNameAddress(i,device.getName(),device.getAddress());
        i++;
      }
    }
  }

  //Code for Synchronisation
  private enum State {STOPPED,RUNNING,STOPPING};
  private State mState = State.STOPPED;
  private synchronized State getState() {
    return mState;
  }
  public synchronized void stop() {
    if (getState() == State.RUNNING) {
      mState = State.STOPPING;
    }
  }

  public void onResume(){
    open(BTaddress);
  }

  public void onPause(){
    flush(0);
    close(0);
  }

  public void run() {
    synchronized (this) {
      if (getState() != State.STOPPED) {
        throw new IllegalStateException("Already running.");
      }
      mState = State.RUNNING;
      if (DEBUG) Log.d("BluetoothManager","Starting");
    }
    while (true) {
      try {
        if (getState() != State.RUNNING){
          break;
        }
        if ( BTsocket == null || BTsocket.isConnected() == false) {
          continue;
        }
        error_flag=false;
        // Handle incoming data.
        int len = BTinStream.read(tmpInBuffer.array());
        if (len > 0) {
          if (DEBUG) Log.d("BluetoothManager","Recv: "+len);
          final byte[] inBuff = new byte[len];
          tmpInBuffer.get(inBuff, 0, len);
          synchronized(mInBuffer){
            if (isreading) {
              mInBuffer.compact();
              isreading=false;
            }
            mInBuffer.put(inBuff);
          }
          if (DEBUG) Log.d("BluetoothManager","InBuffer: ["+mInBuffer.position()+"/"+mInBuffer.limit()+"]");
        }
        tmpInBuffer.clear();
        // Handle outgoing data.
        byte[] outBuff = null;
        synchronized (mOutBuffer) {
          len = mOutBuffer.position();
          if (len > 0) {
            mOutBuffer.flip();
            outBuff = new byte[len];
            mOutBuffer.get(outBuff, 0, len);
            String ss = new String(outBuff);
            if (DEBUG) Log.d("BluetoothManager","OutBuff: "+ss);
            mOutBuffer.clear();
          }
        }
        if (outBuff != null) {
          try {
           BToutStream.write(outBuff, 0, len);
          } catch (IOException e) {
            close(0);
            error_flag=true;
          }
          String s = new String(outBuff);
          if (DEBUG) Log.d("BluetoothManager","Sent: "+s);
        }
      } catch (Exception e) {
        Log.d("BluetoothManager","Exception in Run: "+e);
        close(0);
        error_flag=true;
      }
    }
  }
  // Open the Serial Port
  public int open(String devname){
    if (!BTadapter.checkBluetoothAddress(devname)){
     return 0;
    }
    // Stop discovery process if one is ongoing to save power.
    BTadapter.cancelDiscovery();

    BTaddress=devname;
    BluetoothDevice BTdevice = BTadapter.getRemoteDevice(BTaddress);
    if (BTdevice == null){
      error_flag=true;
      return 0;
    }
    // Create an RFCOMM BluetoothSocket 
    try {
      BTsocket = BTdevice.createRfcommSocketToServiceRecord(BTuuid);
    } catch (IOException e) {
      Log.d("BluetoothManager","Can't make RFCOMM socket: "+e);
      error_flag=true;
      return 0;
    }
    // Make the connection
    try {
      BTsocket.connect();
    } catch (IOException e) {
      try {
        BTsocket.close();
      } catch (IOException e2) {
        error_flag=true;
        return 0;
      }
      Log.d("BluetoothManager","Can't connect: "+e);
      error_flag=true;
      return 0;
    }
    // Get the IO Streams
    try {
      BToutStream = BTsocket.getOutputStream();
      BTinStream = BTsocket.getInputStream();
    } catch (IOException e) {
      Log.d("BluetoothManager","Can't get IO Streams: "+e);
      error_flag=true;
      return 0;
    }
    // Return some unused identifier to be interface compatible with serial.
    return BTdevice.hashCode();  
  }

  //Close the Serial Port
  public int close(int dev){
    if (BTsocket != null){
      try {
        mInBuffer.clear();
        BTsocket.close();
        BTsocket=null;
        return 0;
      } catch (IOException e){
        Log.d("BluetoothManager","Exception: "+e);
      }
    }
    return 1;
  }
  //Write a char to the Serial Port
  public void writechar(int dev, int val){
    synchronized (mOutBuffer) {
      mOutBuffer.put((byte) val);
    }
  }
  //Read a char from the Serial Port
  public int readchar(int dev){
    final int ret;
    if (error_flag){
      return -2;
    }
    synchronized(mInBuffer){
      if (mInBuffer.position()==0 || mInBuffer.position()==mInBuffer.limit()){
        return -1;
      }
      if (!isreading){
        mInBuffer.flip();
        isreading=true;
      }
      ret=mInBuffer.get() & 0xFF;
    }
    return ret;
  }
  // Flush the InputBuffer
  public void flush(int dev){
    synchronized(mInBuffer){
      mInBuffer.clear();
      isreading=false;
    }
    if (DEBUG) Log.d("BluetoothManager","Flush mInBuffer");
  }

  // JNI bindings
  native void passNameAddress(int ct, String name, String address);
}
